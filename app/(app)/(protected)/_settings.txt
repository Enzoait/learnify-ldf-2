import React, { useState, useEffect } from "react";
import { View, TextInput, StyleSheet, Switch, Button, Text } from "react-native";
import { supabase } from "@/config/supabase";
import * as Notifications from "expo-notifications";

export default function NotificationSettings() {
	const [notificationEnabled, setNotificationEnabled] = useState(false);
	const [notificationTitle, setNotificationTitle] = useState("");
	const [notificationBody, setNotificationBody] = useState("");
	const [expoPushToken, setExpoPushToken] = useState<string | null>(null);

	const updateNotificationSettings = async (enabled: boolean) => {
		const { data: userData, error: userError } = await supabase.auth.getUser();
		const user = userData?.user;
		if (userError) return;

		if (user) {
			const { error } = await supabase
				.from("notifications_utilisateurs")
				.update({ enabled })
				.eq("user_id", user.id);

			if (error) {
				console.error("Erreur lors de l'activation des notifications :", error.message);
			}
		}
	};

	useEffect(() => {
		const fetchPushToken = async () => {
			try {
				const { status } = await Notifications.requestPermissionsAsync();
				if (status !== "granted") return;

				const token = await Notifications.getExpoPushTokenAsync();
				setExpoPushToken(token.data);

				const { data: userData, error: userError } = await supabase.auth.getUser();
				const user = userData?.user;
				if (userError || !user) return;

				const { data: notifData, error: notifError } = await supabase
					.from("notifications_utilisateurs")
					.select("notification_title, notification_body, enabled")
					.eq("user_id", user.id)
					.single();

				if (notifData) {
					setNotificationTitle(notifData.notification_title || "");
					setNotificationBody(notifData.notification_body || "");
					setNotificationEnabled(notifData.enabled);
				}

				await supabase
					.from("notifications_utilisateurs")
					.upsert({
						user_id: user.id,
						expo_token: token.data,
					});
			} catch (error) {
				console.error("Erreur lors de la récupération du token Expo :", error);
			}
		};

		fetchPushToken();
	}, []);

	const handleSave = async () => {
		if (!notificationEnabled) return;

		const { data: userData, error: userError } = await supabase.auth.getUser();
		const user = userData?.user;
		if (userError || !user || !expoPushToken) return;

		const { error } = await supabase
			.from("notifications_utilisateurs")
			.upsert({
				user_id: user.id,
				notification_title: notificationTitle,
				notification_body: notificationBody,
				enabled: true,
				expo_token: expoPushToken,
			});

		if (!error) {
			alert("Paramètres de notification enregistrés !");
		}
	};

	return (
		<View style={styles.container}>
			<Text style={styles.title}>Paramètres de Notification</Text>

			<Text style={styles.label}>Titre de la Notification</Text>
			<TextInput
				value={notificationTitle}
				onChangeText={setNotificationTitle}
				placeholder="Entrez le titre de la notification"
				style={styles.input}
			/>

			<Text style={styles.label}>Corps de la Notification</Text>
			<TextInput
				value={notificationBody}
				onChangeText={setNotificationBody}
				placeholder="Entrez le corps de la notification"
				style={styles.input}
			/>

			<View style={styles.switchContainer}>
				<Text style={styles.switchLabel}>Activer les notifications</Text>
				<Switch
					value={notificationEnabled}
					onValueChange={(value) => {
						setNotificationEnabled(value);
						updateNotificationSettings(value);
					}}
					trackColor={{ false: "#767577", true: "#81b0ff" }}
					thumbColor={notificationEnabled ? "#f5dd4b" : "#f4f3f4"}
				/>
			</View>

			<Button title="Enregistrer les paramètres" onPress={handleSave} />
		</View>
	);
}

const styles = StyleSheet.create({
	container: { flex: 1, padding: 20, marginTop: 40 },
	title: { fontSize: 24, fontWeight: "bold", textAlign: "center", marginBottom: 20 },
	label: { fontSize: 16, marginBottom: 8, color: "#000" },
	input: {
		borderWidth: 1,
		borderColor: "#15803d",
		borderRadius: 8,
		padding: 10,
		marginBottom: 20,
		backgroundColor: "#fff",
		color: "#333",
	},
	switchContainer: {
		flexDirection: "row",
		alignItems: "center",
		justifyContent: "space-between",
		marginBottom: 20,
	},
	switchLabel: { fontSize: 16, color: "#000" },
});
